/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

@use "~@material/list";
@use "~@material/theme/theme";
@use "~@material/theme/theme-color";
@use "~@material/rtl";
@use "~@material/typography";
// name is transformed by copybara so `as` is needed
@use "~@material/feature-targeting" as featuretargeting;
@use "~@material/density";
@use "~@material/ripple";
@use "sass:map";

$query: featuretargeting.all();
$feat-structure: featuretargeting.create-target($query, structure);
$feat-color: featuretargeting.create-target($query, color);
$feat-animation: featuretargeting.create-target($query, animation);
$item-primary-text-baseline-height: 32px;
$item-secondary-text-baseline-height: 20px;
$dense-item-primary-text-baseline-height: 24px;

@include list.deprecated-core-styles;
@include list.deprecated-divider-insets-variant(list.$deprecated-icon-variant-config, $query: $query);

@mixin graphic-size_($width, $height: $width) {
  width: $width;
  height: $height;
}

.mdc-deprecated-list-item {
  outline: none;
  user-select: none;
  list-style-type: none;
  -webkit-tap-highlight-color: transparent;

  $height: density.prop-value(
    $density-config: list.$deprecated-single-line-density-config,
    $density-scale: list.$deprecated-single-line-density-scale,
    $property-name: height,
  );
  @include list.deprecated-single-line-height($height, $query: $query);
  @include list.deprecated-item-base_;

  padding-left: var(--mdc-list-side-padding, 16px);
  padding-right: var(--mdc-list-side-padding, 16px);

  .mdc-deprecated-list-item__graphic {
    @include featuretargeting.targets($feat-structure) {
      justify-content: center;
    }
  }

  &[data-graphic-size="small"] {
    .mdc-deprecated-list-item__graphic {
      max-width: 24px;
      min-width: 24px;
    }
  }

  &[data-graphic-size="large"] {
    padding-left: var(--mdc-list-side-padding, 0px);
  }

  $height: density.prop-value(
    $density-config: list.$deprecated-single-line-density-config,
    $density-scale: list.$deprecated-single-line-density-scale,
    $property-name: height,
  );

  // color: rgba(0, 0, 0, 0.87);
  // color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87));

  // Override anchor tag styles for the use-case of a list being used for navigation
  // stylelint-disable selector-max-type,selector-no-qualifying-type
  a {
    @include featuretargeting.targets($feat-structure) {
      color: inherit;
      text-decoration: none;
    }
  }

  &[data-lines="1"] {
    @include list.deprecated-single-line-height($height, $query: $query);
    &:has(.mdc-deprecated-list-item__graphic) {
      height: 56px;
      &[data-graphic-size="medium"],
      &[data-graphic-size="large"] {
        height: 72px;
      }
    }
  }

  &[data-lines="2"] {
    height: 72px;
    .mdc-deprecated-list-item__text {
      @include featuretargeting.targets($feat-structure) {
        align-self: flex-start;
      }
    }
  }

  &[data-lines="3"] {
    height: 88px;
    .mdc-deprecated-list-item__text {
      @include featuretargeting.targets($feat-structure) {
        align-self: flex-start;
      }
    }
  }

  &.mdc-deprecated-list-item--non-interactive {
    cursor: default;
  }
}

.mdc-deprecated-list-item__graphic {
  @include featuretargeting.targets($feat-structure) {
    flex-shrink: 0;
    align-items: center;
    justify-content: flex-start;
    fill: currentColor;
    display: inline-flex;
  }

  width: auto;
  min-width: 40px;
  height: auto;
  max-height: 56px;

  @include rtl.reflexive-box(margin, right, var(--mdc-list-item-graphic-margin, 16px));

  @include featuretargeting.targets($feat-color) {
    @include theme.property(background-color, transparent);
    @include theme.property(color, text-icon-on-background);
  }
}

.mdc-deprecated-list-item__meta {
  @include featuretargeting.targets($feat-structure) {
    flex-shrink: 0;
    align-items: center;
    justify-content: center;
    fill: currentColor;
    display: inline-flex;
  }

  width: auto;

  @include typography.typography(caption, $query);

  @include featuretargeting.targets($feat-structure) {
    @include rtl.reflexive-property(margin, auto, 0);
  }

  @include featuretargeting.targets($feat-color) {
    @include theme.property(color, text-hint-on-background);
  }
}

.mdc-deprecated-list-item__text {
  @include typography.typography(subtitle1, $query);
  @include typography.overflow-ellipsis($query);

  // Disable interaction on label elements that may automatically
  // toggle corresponding checkbox / radio input.
  > *[for] {
    @include featuretargeting.targets($feat-structure) {
      pointer-events: none;
    }
  }
}

.mdc-deprecated-list-item__primary-text {
  @include typography.overflow-ellipsis($query);
  @include typography.text-baseline(
    $top: $item-primary-text-baseline-height,
    $bottom: $item-secondary-text-baseline-height,
    $query: $query
  );

  @include featuretargeting.targets($feat-structure) {
    display: block;
  }
}

.mdc-deprecated-list-item__secondary-text {
  @include typography.typography(body2, $query);
  @include typography.overflow-ellipsis($query);
  @include typography.text-baseline($top: $item-secondary-text-baseline-height, $query: $query);

  @include featuretargeting.targets($feat-structure) {
    display: block;
  }

  @include featuretargeting.targets($feat-color) {
    @include theme.property(color, text-secondary-on-background);
  }

  // stylelint-disable plugin/selector-bem-pattern
  .mdc-deprecated-list--dense & {
    @include featuretargeting.targets($feat-structure) {
      font-size: inherit;
    }
  }
  // stylelint-enable plugin/selector-bem-pattern
}

// "Selected" is ephemeral and likely to change soon. E.g., selecting one or more photos to share in Google Photos.
// "Activated" is more permanent. E.g., the currently highlighted navigation destination in a drawer.
.mdc-deprecated-list-item[activated] {
  @include list.deprecated-item-primary-text-ink-color(primary, $query);
  @include list.deprecated-item-graphic-ink-color(primary, $query);

  --mdc-ripple-color: var(--mdc-theme-primary, #{theme-color.prop-value(primary)});
}

.mdc-deprecated-list-item[disabled] {
  cursor: default;
  pointer-events: none;
  .mdc-deprecated-list-item__text {
    @include featuretargeting.targets($feat-color) {
      opacity: list.$deprecated-text-disabled-opacity;
    }
  }

  .mdc-deprecated-list-item__text,
  .mdc-deprecated-list-item__primary-text,
  .mdc-deprecated-list-item__secondary-text {
    @include featuretargeting.targets($feat-color) {
      @include theme.property(color, list.$deprecated-text-disabled-color);
    }
  }
}

.mdc-deprecated-list-group__subheader > * {
  @include featuretargeting.targets($feat-color) {
    @include theme.property(color, text-primary-on-background);
  }
}

.mdc-deprecated-list-divider {
  list-style-type: none;
}
